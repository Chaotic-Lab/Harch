#!/bin/bash

# HArch Bios Install (Harchbvbvvvvb)
# ---------------------------------------------------------------
# Author    : Chaotic_Guru                                       |
# Github    : https://github.com/ChaoticHackingNetwork           |
# Discord   : https://discord.gg/nv445EX (ChaoticHackingNetwork) |
# ---------------------------------------------------------------

echo -e "\033[33;36mChaotic_Guru's Hacking Arch Installer\033[0m"

echo " $$$$$$\                      $$\             $$\       $$\                               "
echo "$$  __$$\                     $$ |            $$ |      \__|                              "
echo "$$ /  $$ | $$$$$$\   $$$$$$$\ $$$$$$$\        $$ |      $$\ $$$$$$$\  $$\   $$\ $$\   $$\ "
echo "$$$$$$$$ |$$  __$$\ $$  _____|$$  __$$\       $$ |      $$ |$$  __$$\ $$ |  $$ |\$$\ $$  |"
echo "$$  __$$ |$$ |  \__|$$ /      $$ |  $$ |      $$ |      $$ |$$ |  $$ |$$ |  $$ | \$$$$  / "
echo "$$ |  $$ |$$ |      $$ |      $$ |  $$ |      $$ |      $$ |$$ |  $$ |$$ |  $$ | $$  $$<  "
echo "$$ |  $$ |$$ |      \$$$$$$$\ $$ |  $$ |      $$$$$$$$\ $$ |$$ |  $$ |\$$$$$$  |$$  /\$$\ "
echo "\__|  \__|\__|       \_______|\__|  \__|      \________|\__|\__|  \__| \______/ \__/  \__|"
                                                                                          
                                                                                          
                                                                                          

#Network Connections
read -p 'Are you connected to the Internet? [y/N]: ' connected
if ! [ $connected = 'y' ] && ! [ $connected = 'Y' ]
then
	echo "Please connect to the Internet to continue..."
	exit
fi

read -p 'This script is by default set to modify /dev/sda, if this is not the drive you want, EXIT NOW!' device
if ! [ $device = 'y' ] && [ $device = 'Y']
then
	echo "Change "
 
#Determine BIOS or UEFI
dmesg | grep -q "EFI v" # -q = grep output to nothing
if [ $0 -eq 0 ]
then
	echo "This is a UEFI System!"
	echo "This script will create and format the following partitions:"
	echo "--------- /dev/sda1 - 512M will be mounted as /boot/EFI ------------"
	echo "--------- /dev/sda2 - 16G of space will be mounted as SWAP ---------"
	echo "--------- /dev/sda3 - rest of space will be mounted as / -----------"
	echo.
	echo "Exit now if this is not correct!!!"
	#Create partitions thru fdisk...
	#https://superuser.com/a/984637
	sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk /dev/sda #CHANGE THIS IF NEEDED!!!
	o # Clear the in-memory partition table
	n # New partition
	p # Primary partition
	1 # First partition
		# EFI - start at beginning of disk
	+512M # /boot/EFI
	n
	p
	2
		# SWAP - start immediately after preceding partition
	+16G
	n 
	p
	3
		# ROOT, start immediately after preceding partition
		# default, use rest of disk space
	p # print the in-memory table
	w # write changes to disk
	q # quit
		
EOF

	#Format partitions
	mkfs.ext4 /dev/sda3 
	mkfs.fat -F32 /dev/sda1

	#Mount partitions
	mount /dev/sda3 /mnt

	#Create swap space
	mkswap /dev/sda2
	swapon /dev/sda2

else
	echo "This is a BIOS system!"
	echo "This script will create and format the following partitions:"
	echo ""
	echo "--------- /dev/sda1 - 16G will be mounted as SWAP space ------------"
	echo "--------- /dev/sda2 - Rest of space will be mounted as / -----------"
	echo ""
	#Create partitions thru fdisk...
	#https://superuser.com/a/984637
	sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk /dev/sda # CHANGE THIS IF NEEDED!!!
	o # Clear the in-memory partition table
	n # New partition
	p # Primary partition
	1 # First partition
		# SWAP - start at beginning of disk
	+16G # swap space
	n 
	p
	2
		# ROOT, start immediately after preceding partition
		# default, use rest of disk space
	p # print the in-memory table
	w # write changes to disk
	q # quit
		
EOF

	#Format partitions
	mkfs.ext4 /dev/sda2

	#Mount partitions
	mount /dev/sda2 /mnt

	#Create swap space
	mkswap /dev/sda1
	swapon /dev/sda1

fi

#Display new tables and confirm
lsblk
echo "Mount points correct?"
read -p 'Continue? [Y/n]' confirm
if ! [ $confirm = 'y' ] && ! [ $confirm = 'Y' ]
then 
	echo "Please edit the script to continue..."
	exit
fi

#Install base system
pacstrap /mnt base base-devel linux linux-firmware

#Generate fstab
genfstab -U /mnt >> /mnt/etc/fstab
cat /mnt/etc/fstab

#Finish last minute setup
echo 0 > /proc/sys/kernel/hung_task_timeout_secs
curl -O https://raw.githubusercontent.com/ChaoticHackingNetwork/Harch/master/HarchPost
mv HarchPost /mnt
echo "The final script has been installed and move to your new root directory..."
echo "Run these commands to finish setup..."
echo.
echo "	[1] arch-chroot /mnt /bin/bash"
echo "	[2] chmod +x HarchPost.sh"
echo "  [3] ./HarchPost.sh"

exit
